buildscript {
    repositories {
        // Keep this for testing dev versions of the lazybones-templates plugin
//        mavenCentral()
//        mavenLocal()
        maven { url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins' }
    }

    dependencies {
        // Keep this for testing dev versions of the lazybones-templates plugin
//        classpath "uk.co.cacoethes:lazybones-gradle:1.2.3"
        classpath 'net.gvmtool:gradle-sdkvendor-plugin:0.4.0'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.12.200'
    }
}

import uk.co.cacoethes.gradle.tasks.BintrayGenericUpload

plugins {
    id "net.saliman.cobertura" version "2.2.7"
    id "uk.co.cacoethes.lazybones-templates" version "1.2.3"
}

apply plugin: "kotlin"
apply plugin: "groovy"
apply plugin: "application"
apply plugin: "codenarc"
apply plugin: "net.gvmtool.sdkvendor"

applicationName = "lazybones"
mainClassName = "uk.co.cacoethes.lazybones.LazybonesPackage"
version = "0.8-SNAPSHOT"

// These settings mimic the old client VM behavior. Should result in faster startup.
applicationDefaultJvmArgs = ["-XX:+TieredCompilation", "-XX:TieredStopAtLevel=1", "-XX:CICompilerCount=3"]

sourceCompatibility = "1.6"
targetCompatibility = "1.6"

ext {
    groovyVersion = "2.3.6"
    cachePath = new File(System.getProperty("user.home"), ".lazybones/templates").absolutePath
    isCiBuild = System.getProperty("drone.io") as boolean
    testWorkDir = file("$buildDir/testWork").path
}

sourceSets {
    integTest {
        groovy {
            srcDir "src/integTest/groovy"
            compileClasspath += sourceSets.main.output
        }
        resources {
            srcDir "src/integTest/resources"
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.codehaus.groovy:groovy:${groovyVersion}"
    compile "org.jetbrains.kotlin:kotlin-stdlib:0.12.200", "org.jetbrains.kotlin:kotlin-reflect:0.12.200"

    compile "commons-io:commons-io:2.4",
            "org.codehaus.groovy:groovy-json:${groovyVersion}",
            "org.codehaus.groovy:groovy-templates:${groovyVersion}",
            "org.apache.commons:commons-compress:1.5",
            "com.github.groovy-wslite:groovy-wslite:0.7.2",
            "net.sf.jopt-simple:jopt-simple:4.4",
            "org.ini4j:ini4j:0.5.2"

    runtime "org.apache.ivy:ivy:2.3.0"

    testCompile "org.spockframework:spock-core:0.7-groovy-2.0", {
        exclude module: "groovy-all"
    }

    integTestCompile "org.codehaus.groovy:groovy-all:${groovyVersion}",
                     "commons-io:commons-io:2.4",
                     "co.freeside:betamax:1.1.2"

    integTestCompile "org.spockframework:spock-core:0.7-groovy-2.0", {
        exclude module: "groovy-all"
    }
}

//compileKotlin.mustRunAfter compileGroovy

idea {
    module {
        scopes.PROVIDED.plus += [configurations.integTestCompile]
    }
}

jar {
    manifest {
        attributes("Implementation-Title": "Lazybones", "Implementation-Version": version)
    }
}

gvm {
    api = "https://gvm-vendor.herokuapp.com/"
    candidate = project.applicationName
    version = project.version
    url = "https://bintray.com/artifact/download/pledbrook/lazybones-templates/${project.applicationName}-${project.version}.zip"
    hashtag = "#lazybones"
}

lazybones {
    templateDirs = files(file("${projectDir}/src/integTest/templates").listFiles())
    template "subtemplates-tmpl" includes "controller", "entity", "bad"
    template "test-handlebars", {
        version = "0.1.1"
    }
}

packageAllTemplates.dependsOn("packageTemplate-Oops-stuff")
installAllTemplates.dependsOn("installTemplate-Oops-stuff")

task configureCachePath {
    if (isCiBuild) {
        // Load the default cache directory location from the default config file.
        // We have to defer the evaluation until after the test resources have been
        // copied onto the classpath.
        def defaultConfigFile = sourceSets.main.resources.filter { it.name == "uk.co.cacoethes.lazybones.config.defaultConfig.groovy" }.singleFile
        def defaultConfig = new ConfigSlurper().parse(defaultConfigFile.text)
        project.cachePath = defaultConfig.cache.dir
    }
    else {
        project.cachePath = testWorkDir + "/template-cache"
    }

    project.extensions.lazybones.installDir = new File(project.cachePath)
}

//for a single test, you can run "gradle -DintegTest.single=<test name>"
task integTest(type: Test) {
    dependsOn "installApp", "configureCachePath", "installAllTemplates"
    inputs.dir sourceSets.main.output.classesDir
    inputs.dir sourceSets.main.output.resourcesDir

    mustRunAfter "test"
    ignoreFailures = true

    systemProperty "lazybones.testWorkDir", testWorkDir
    systemProperty "lazybones.installDir", installApp.destinationDir.path
    systemProperty "lzbtest.expected.version", version

    // Allows us to disable tests that don't work on Drone.io, such as the
    // CreateFunctionalSpec feature test for --with-git.
    systemProperty "lazybones.config.file",
                   new File(sourceSets.integTest.output.resourcesDir, "test-config.groovy").absolutePath

    def cachePath
    if (isCiBuild) {
        systemProperty "drone.io", "true"
    }
    else {
        // Use the default cache location on the CI server, but a custom one
        // on local machines to avoid polluting the developer's own cache.
        systemProperty "lazybones.cache.dir", project.cachePath
    }

    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath

    include "**/*Spec*"
    exclude "**/Abstract*Spec*"
}

task packageReports(type: Zip) {
    from "build/reports"
    archiveName = "reports.zip"
    destinationDir = buildDir
}

integTest.finalizedBy packageReports

codenarc {
    configFile = rootProject.file("codenarc.groovy")
}
codenarcMain.excludes = ["**/NameType.groovy"]
codenarcTest.enabled = false
codenarcIntegTest.enabled = false

/** Cobertura (Coverage) Configuration */
cobertura {
    coverageFormats = ['html', 'xml']
    coverageSourceDirs = sourceSets.main.allSource.srcDirs
}

distZip.dependsOn("test", "integTest")
check.dependsOn("test", "integTest")

task uploadDist(type: BintrayGenericUpload, dependsOn: "distZip") {
    artifactFile = distZip.archivePath
    artifactUrlPath = "lazybones/${version}/${distZip.archiveName}"
    repositoryName = "pledbrook/lazybones-templates"
    packageName = "lazybones"
    licenses = ["Apache-2.0"]
}

task release(dependsOn: ["uploadDist", "sdkMajorRelease"])
sdkMajorRelease.mustRunAfter uploadDist

// Lazy initialisation of uploadDist task so that not all build users need to
// set the repo.* project properties.
//
// We also lazily configure the cache directory system property when running
// the integration tests. This is to ensure that the test-tmpl template gets
// installed into the cache directory being used by the integration tests.
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(":lazybones-app:uploadDist")) {
        verifyProperty(project, 'repo.username')
        verifyProperty(project, 'repo.apiKey')

        uploadDist.username = project.'repo.username'
        uploadDist.apiKey = project.'repo.apiKey'
    }

    if (graph.hasTask(":lazybones-app:sdkMajorRelease")) {
        verifyProperty(project, 'gvm.consumerKey')
        verifyProperty(project, 'gvm.consumerToken')
        sdkMajorRelease.consumerKey = project.'gvm.consumerKey'
        sdkMajorRelease.consumerToken = project.'gvm.consumerToken'
    }
}

void verifyProperty(Project proj, String name) {
    if (!project.hasProperty(name)) {
        throw new GradleException("You must define the project property '$name'")
    }
}
